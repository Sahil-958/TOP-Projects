"use strict";(self.webpackChunkwebpack_demo=self.webpackChunkwebpack_demo||[]).push([[57],{972:(A,t,n)=>{n.d(t,{A:()=>i});var e=n(354),o=n.n(e),r=n(314),a=n.n(r)()(o());a.push([A.id,"/*\n! tailwindcss v3.4.6 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: currentColor; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n7. Disable tap highlights on iOS\n*/\n\nhtml,\n:host {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n  font-variation-settings: normal; /* 6 */\n  -webkit-tap-highlight-color: transparent; /* 7 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font-family by default.\n2. Use the user's configured `mono` font-feature-settings by default.\n3. Use the user's configured `mono` font-variation-settings by default.\n4. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; /* 1 */\n  font-feature-settings: normal; /* 2 */\n  font-variation-settings: normal; /* 3 */\n  font-size: 1em; /* 4 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-feature-settings: inherit; /* 1 */\n  font-variation-settings: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  letter-spacing: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\ninput:where([type='button']),\ninput:where([type='reset']),\ninput:where([type='submit']) {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nReset default styling for dialogs.\n*/\ndialog {\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n  --tw-contain-size:  ;\n  --tw-contain-layout:  ;\n  --tw-contain-paint:  ;\n  --tw-contain-style:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n  --tw-contain-size:  ;\n  --tw-contain-layout:  ;\n  --tw-contain-paint:  ;\n  --tw-contain-style:  ;\n}.visible {\n  visibility: visible;\n}.invisible {\n  visibility: hidden;\n}.absolute {\n  position: absolute;\n}.relative {\n  position: relative;\n}.-right-full {\n  right: -100%;\n}.left-1\\/2 {\n  left: 50%;\n}.right-2 {\n  right: 0.5rem;\n}.top-1\\/2 {\n  top: 50%;\n}.m-0 {\n  margin: 0px;\n}.mb-1 {\n  margin-bottom: 0.25rem;\n}.ml-4 {\n  margin-left: 1rem;\n}.mt-1 {\n  margin-top: 0.25rem;\n}.mt-2 {\n  margin-top: 0.5rem;\n}.mt-4 {\n  margin-top: 1rem;\n}.flex {\n  display: flex;\n}.hidden {\n  display: none;\n}.size-6 {\n  width: 1.5rem;\n  height: 1.5rem;\n}.h-0 {\n  height: 0px;\n}.h-dvh {\n  height: 100dvh;\n}.h-full {\n  height: 100%;\n}.h-max {\n  height: -moz-max-content;\n  height: max-content;\n}.max-h-0 {\n  max-height: 0px;\n}.max-h-36 {\n  max-height: 9rem;\n}.w-4\\/5 {\n  width: 80%;\n}.w-full {\n  width: 100%;\n}.max-w-full {\n  max-width: 100%;\n}.flex-grow {\n  flex-grow: 1;\n}.basis-80 {\n  flex-basis: 20rem;\n}.-translate-x-1\\/2 {\n  --tw-translate-x: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}.-translate-y-1\\/2 {\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}.translate-x-full {\n  --tw-translate-x: 100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}.scale-0 {\n  --tw-scale-x: 0;\n  --tw-scale-y: 0;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}.scale-y-0 {\n  --tw-scale-y: 0;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}.transform {\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}.transform-none {\n  transform: none;\n}.cursor-pointer {\n  cursor: pointer;\n}.flex-col {\n  flex-direction: column;\n}.flex-wrap {\n  flex-wrap: wrap;\n}.flex-nowrap {\n  flex-wrap: nowrap;\n}.content-start {\n  align-content: flex-start;\n}.items-start {\n  align-items: flex-start;\n}.items-end {\n  align-items: flex-end;\n}.items-center {\n  align-items: center;\n}.justify-start {\n  justify-content: flex-start;\n}.justify-between {\n  justify-content: space-between;\n}.gap-2 {\n  gap: 0.5rem;\n}.gap-4 {\n  gap: 1rem;\n}.overflow-auto {\n  overflow: auto;\n}.overflow-hidden {\n  overflow: hidden;\n}.overflow-scroll {\n  overflow: scroll;\n}.rounded-3xl {\n  border-radius: 1.5rem;\n}.rounded-full {\n  border-radius: 9999px;\n}.rounded-lg {\n  border-radius: 0.5rem;\n}.rounded-xl {\n  border-radius: 0.75rem;\n}.rounded-b-2xl {\n  border-bottom-right-radius: 1rem;\n  border-bottom-left-radius: 1rem;\n}.rounded-l-2xl {\n  border-top-left-radius: 1rem;\n  border-bottom-left-radius: 1rem;\n}.rounded-r-2xl {\n  border-top-right-radius: 1rem;\n  border-bottom-right-radius: 1rem;\n}.rounded-t-2xl {\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n}.border {\n  border-width: 1px;\n}.border-2 {\n  border-width: 2px;\n}.border-solid {\n  border-style: solid;\n}.border-on-surface {\n  --tw-border-opacity: 1;\n  border-color: rgb(228 226 227 / var(--tw-border-opacity));\n}.border-secondary {\n  --tw-border-opacity: 1;\n  border-color: rgb(193 199 205 / var(--tw-border-opacity));\n}.bg-primary {\n  --tw-bg-opacity: 1;\n  background-color: rgb(184 201 215 / var(--tw-bg-opacity));\n}.bg-primary-container {\n  --tw-bg-opacity: 1;\n  background-color: rgb(42 58 69 / var(--tw-bg-opacity));\n}.bg-secondary-container {\n  --tw-bg-opacity: 1;\n  background-color: rgb(65 71 76 / var(--tw-bg-opacity));\n}.bg-surface {\n  --tw-bg-opacity: 1;\n  background-color: rgb(19 19 20 / var(--tw-bg-opacity));\n}.bg-surface-container {\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 32 32 / var(--tw-bg-opacity));\n}.bg-surface-container-highest {\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n}.bg-opacity-50 {\n  --tw-bg-opacity: 0.5;\n}.bg-gradient-to-r {\n  background-image: linear-gradient(to right, var(--tw-gradient-stops));\n}.from-surface-container {\n  --tw-gradient-from:  #1f2020 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(31 32 32 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}.to-primary {\n  --tw-gradient-to:  #b8c9d7 var(--tw-gradient-to-position);\n}.to-secondary {\n  --tw-gradient-to:  #c1c7cd var(--tw-gradient-to-position);\n}.to-secondary-container {\n  --tw-gradient-to:  #41474c var(--tw-gradient-to-position);\n}.p-0 {\n  padding: 0px;\n}.p-2 {\n  padding: 0.5rem;\n}.p-2\\.5 {\n  padding: 0.625rem;\n}.p-3 {\n  padding: 0.75rem;\n}.p-4 {\n  padding: 1rem;\n}.px-1 {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}.py-0 {\n  padding-top: 0px;\n  padding-bottom: 0px;\n}.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}.pb-2 {\n  padding-bottom: 0.5rem;\n}.pl-2 {\n  padding-left: 0.5rem;\n}.pl-8 {\n  padding-left: 2rem;\n}.text-left {\n  text-align: left;\n}.text-center {\n  text-align: center;\n}.font-serif {\n  font-family: ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif;\n}.text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}.text-on-primary-container {\n  --tw-text-opacity: 1;\n  color: rgb(186 203 217 / var(--tw-text-opacity));\n}.text-on-secondary-container {\n  --tw-text-opacity: 1;\n  color: rgb(198 203 209 / var(--tw-text-opacity));\n}.text-on-surface {\n  --tw-text-opacity: 1;\n  color: rgb(228 226 227 / var(--tw-text-opacity));\n}.text-primary {\n  --tw-text-opacity: 1;\n  color: rgb(184 201 215 / var(--tw-text-opacity));\n}.text-secondary {\n  --tw-text-opacity: 1;\n  color: rgb(193 199 205 / var(--tw-text-opacity));\n}.opacity-0 {\n  opacity: 0;\n}.shadow {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}.outline {\n  outline-style: solid;\n}.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}.backdrop-blur-lg {\n  --tw-backdrop-blur: blur(16px);\n  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n}.transition-all {\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}.transition-transform {\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}.duration-1000 {\n  transition-duration: 1000ms;\n}.duration-150 {\n  transition-duration: 150ms;\n}.duration-300 {\n  transition-duration: 300ms;\n}.duration-500 {\n  transition-duration: 500ms;\n}.duration-700 {\n  transition-duration: 700ms;\n}.ease-in-out {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}* {\n  box-sizing: border-box;\n}body {\n  display: flex;\n  height: 100dvh;\n  flex-direction: column;\n  gap: 1rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(65 71 76 / var(--tw-bg-opacity));\n  padding: 1rem;\n  --tw-text-opacity: 1;\n  color: rgb(228 226 227 / var(--tw-text-opacity));\n}nav {\n  --tw-bg-opacity: 1;\n  background-color: rgb(65 71 76 / var(--tw-bg-opacity));\n}#main {\n  position: relative;\n  display: flex;\n  height: 100%;\n  gap: 0.5rem;\n  overflow: scroll;\n  border-radius: 1.5rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(19 19 20 / var(--tw-bg-opacity));\n  padding: 0.5rem;\n}#sidebar {\n  display: flex;\n  flex-shrink: 0;\n  flex-basis: 20rem;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  gap: 0.5rem;\n  overflow: hidden;\n  border-top-left-radius: 1rem;\n  border-bottom-left-radius: 1rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding: 0.5rem;\n}#sidebar .sidebar-button {\n  width: 100%;\n  cursor: pointer;\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 32 32 / var(--tw-bg-opacity));\n  padding: 0.75rem;\n  text-align: left;\n  --tw-text-opacity: 1;\n  color: rgb(193 199 205 / var(--tw-text-opacity));\n  transition-property: transform;\n  transition-duration: 150ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}#sidebar .sidebar-button:first-child {\n  border-top-left-radius: 1rem;\n}#sidebar .sidebar-button:last-child {\n  border-bottom-left-radius: 1rem;\n}#sidebar .sidebar-button:hover {\n  --tw-scale-x: 1.05;\n  --tw-scale-y: 1.05;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  --tw-bg-opacity: 1;\n  background-color: rgb(65 71 76 / var(--tw-bg-opacity));\n}#sidebar .sidebar-button:active {\n  --tw-scale-x: .95;\n  --tw-scale-y: .95;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}#sidebar #sort-by-container,#sidebar #show-select-container,#sidebar #projects-container {\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between;\n  gap: 0.5rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 32 32 / var(--tw-bg-opacity));\n  padding: 0.75rem;\n  --tw-text-opacity: 1;\n  color: rgb(193 199 205 / var(--tw-text-opacity));\n}#sidebar #sort-by-container:first-child,#sidebar #show-select-container:first-child,#sidebar #projects-container:first-child {\n  border-top-left-radius: 1rem;\n}#sidebar #sort-by-container:last-child,#sidebar #show-select-container:last-child,#sidebar #projects-container:last-child {\n  border-bottom-left-radius: 1rem;\n}#sidebar #sort-by-container #sortBy,#sidebar #sort-by-container #show,#sidebar #sort-by-container #projects,#sidebar #show-select-container #sortBy,#sidebar #show-select-container #show,#sidebar #show-select-container #projects,#sidebar #projects-container #sortBy,#sidebar #projects-container #show,#sidebar #projects-container #projects {\n  flex-grow: 1;\n  transform: none;\n  border-radius: 0.5rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  --tw-text-opacity: 1;\n  color: rgb(184 201 215 / var(--tw-text-opacity));\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}#sidebar #tags-container {\n  display: flex;\n  width: 100%;\n  flex-grow: 1;\n  flex-wrap: wrap;\n  align-content: flex-start;\n  align-items: flex-start;\n  justify-content: flex-start;\n  gap: 0.5rem;\n  overflow: auto;\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 32 32 / var(--tw-bg-opacity));\n  padding: 0.75rem;\n  --tw-text-opacity: 1;\n  color: rgb(193 199 205 / var(--tw-text-opacity));\n}#sidebar #tags-container:first-child {\n  border-top-left-radius: 1rem;\n}#sidebar #tags-container:last-child {\n  border-bottom-left-radius: 1rem;\n}#sidebar #tags-container .tag {\n  border-radius: 0.75rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(42 58 69 / var(--tw-bg-opacity));\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n  --tw-text-opacity: 1;\n  color: rgb(186 203 217 / var(--tw-text-opacity));\n}#sidebar #tags-container .tag.selected {\n  --tw-bg-opacity: 1;\n  background-color: rgb(184 201 215 / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: rgb(34 50 61 / var(--tw-text-opacity));\n}#content {\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  overflow: auto;\n  border-top-right-radius: 1rem;\n  border-bottom-right-radius: 1rem;-ms-overflow-style:none;scrollbar-width:none;\n}#content ::-webkit-scrollbar{display:none}#content .todo:first-child,#content .todo-body:first-child {\n  border-top-right-radius: 1rem;\n}#content .todo:last-child,#content .todo-body:last-child {\n  border-bottom-right-radius: 1rem;\n}.todo {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding: 1rem;\n  transition-property: all;\n  transition-duration: 500ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}.todo:first-child {\n  margin-top: 0px;\n}.todo:last-child {\n  margin-bottom: 0px;\n}.todo.hide {\n  transform-origin: top;\n  --tw-translate-x: 100%;\n  --tw-scale-y: 0;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  margin: 0px;\n  height: 0px;\n  padding: 0px;\n}.todo.hide .todo-header,.todo.hide .todo-body {\n  margin: 0px;\n  height: 0px;\n  overflow: hidden;\n  padding: 0px;\n}.todo.hideBody {\n  padding: 0px;\n}.todo.hideBody .todo-header {\n  border-radius: 0px;\n}.todo.hideBody:first-child .todo-header {\n  border-top-right-radius: 1rem;\n}.todo.hideBody:last-child .todo-header {\n  border-bottom-right-radius: 1rem;\n}.todo.hideBody .todo-body {\n  max-height: 0px;\n  overflow: hidden;\n  padding-top: 0px;\n  padding-bottom: 0px;\n}.todo .todo-header {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  overflow: hidden;\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 32 32 / var(--tw-bg-opacity));\n  padding: 1rem;\n  transition-property: all;\n  transition-duration: 500ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}.todo .todo-header .todo-checkbox {\n  position: relative;\n  display: flex;\n  align-items: center;\n}.todo .todo-header .todo-checkbox input[type=checkbox] {\n  display: none;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}.todo .todo-header .todo-checkbox input[type=checkbox]:checked+.checkbox {\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(184 201 215 / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: rgb(184 201 215 / var(--tw-bg-opacity));padding:0 50%;\n}.todo .todo-header .todo-checkbox input[type=checkbox]:checked~.todo-title {\n  padding-left: 0px;\n}.todo .todo-header .todo-checkbox .todo-title {\n  cursor: pointer;\n  padding-left: 2rem;\n  transition-property: all;\n  transition-duration: 1000ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}.todo .todo-header .todo-checkbox .todo-title:hover {\n  --tw-text-opacity: 1;\n  color: rgb(184 201 215 / var(--tw-text-opacity));\n}.todo .todo-header .todo-checkbox .checkbox {\n  position: absolute;\n  cursor: pointer;\n  border-radius: 9999px;\n  border-width: 2px;\n  border-style: solid;\n  --tw-border-opacity: 1;\n  border-color: rgb(228 226 227 / var(--tw-border-opacity));\n  padding: 0.625rem;\n  transition-property: all;\n  transition-duration: 500ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}.todo .todo-header .todo-checkbox .checkbox:hover {\n  --tw-border-opacity: 1;\n  border-color: rgb(184 201 215 / var(--tw-border-opacity));\n}.todo .todo-header.priority-low {\n  background-image: linear-gradient(to right, var(--tw-gradient-stops));\n  --tw-gradient-from:  #1f2020 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(31 32 32 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n  --tw-gradient-to:  #41474c var(--tw-gradient-to-position);\n  --tw-gradient-to-position: 90%;\n}.todo .todo-header.priority-low .todo-project,.todo .todo-header.priority-low .todo-delete-action,.todo .todo-header.priority-low .todo-edit-action,.todo .todo-header.priority-low .todo-due {\n  --tw-text-opacity: 1;\n  color: rgb(198 203 209 / var(--tw-text-opacity));\n}.todo .todo-header.priority-low .todo-project.expired,.todo .todo-header.priority-low .todo-delete-action.expired,.todo .todo-header.priority-low .todo-edit-action.expired,.todo .todo-header.priority-low .todo-due.expired {\n  --tw-text-opacity: 1;\n  color: rgb(255 180 171 / var(--tw-text-opacity));\n}.todo .todo-header.priority-medium {\n  background-image: linear-gradient(to right, var(--tw-gradient-stops));\n  --tw-gradient-from:  #1f2020 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(31 32 32 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n  --tw-gradient-to:  #c1c7cd var(--tw-gradient-to-position);\n  --tw-gradient-to-position: 90%;\n}.todo .todo-header.priority-medium .todo-project,.todo .todo-header.priority-medium .todo-delete-action,.todo .todo-header.priority-medium .todo-edit-action,.todo .todo-header.priority-medium .todo-due {\n  --tw-text-opacity: 1;\n  color: rgb(43 49 54 / var(--tw-text-opacity));\n}.todo .todo-header.priority-high {\n  background-image: linear-gradient(to right, var(--tw-gradient-stops));\n  --tw-gradient-from:  #1f2020 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(31 32 32 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n  --tw-gradient-to:  #b8c9d7 var(--tw-gradient-to-position);\n  --tw-gradient-to-position: 90%;\n}.todo .todo-header.priority-high .todo-project,.todo .todo-header.priority-high .todo-delete-action,.todo .todo-header.priority-high .todo-edit-action,.todo .todo-header.priority-high .todo-due {\n  --tw-text-opacity: 1;\n  color: rgb(34 50 61 / var(--tw-text-opacity));\n}.todo .todo-header .todo-meta {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  transition-property: all;\n  transition-duration: 500ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}.todo .todo-header .todo-meta .todo-due {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}.todo .todo-header .todo-meta .todo-project {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}.todo .todo-header .todo-delete-action,.todo .todo-header .todo-edit-action {\n  position: absolute;\n  right: -100%;\n  cursor: pointer;\n  --tw-text-opacity: 1;\n  color: rgb(34 50 61 / var(--tw-text-opacity));\n  transition-property: all;\n  transition-duration: 700ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}.todo .todo-header .todo-delete-action svg,.todo .todo-header .todo-edit-action svg {\n  height: 2rem;\n}.todo .todo-header .todo-edit-action {\n  transition-duration: 500ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}.todo .todo-header:hover .todo-delete-action {\n  right: 0.5rem;\n}.todo .todo-header:hover .todo-delete-action:hover {\n  --tw-text-opacity: 1;\n  color: rgb(255 180 171 / var(--tw-text-opacity));\n}.todo .todo-header:hover .todo-edit-action {\n  right: 2.5rem;\n}.todo .todo-header:hover .todo-meta {\n  margin-right: 3.5rem;\n}.todo .todo-body {\n  height: 100%;\n  max-height: 9rem;\n  max-width: 100%;\n  overflow: auto;\n  overflow-wrap: break-word;\n  border-bottom-right-radius: 1rem;\n  border-bottom-left-radius: 1rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 32 32 / var(--tw-bg-opacity));\n  padding: 1rem;\n  transition-property: all;\n  transition-duration: 500ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}.todo .todo-body #todo-creation-para {\n  font-size: 0.75rem;\n  line-height: 1rem;\n  --tw-text-opacity: 1;\n  color: rgb(228 226 227 / var(--tw-text-opacity));\n}.todo .todo-body .todo-tags {\n  margin-top: 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  --tw-text-opacity: 1;\n  color: rgb(184 201 215 / var(--tw-text-opacity));\n}.todo .todo-body .todo-tags .tag {\n  border-radius: 0.75rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(42 58 69 / var(--tw-bg-opacity));\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n  --tw-text-opacity: 1;\n  color: rgb(186 203 217 / var(--tw-text-opacity));\n}.no-todos {\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding: 1rem;\n  text-align: center;\n  --tw-text-opacity: 1;\n  color: rgb(198 203 209 / var(--tw-text-opacity));\n}.no-todos:first-child {\n  border-top-right-radius: 1rem;\n}#create-todo-dialog {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  z-index: 50;\n  height: -moz-max-content;\n  height: max-content;\n  width: 80%;\n  --tw-translate-x: -50%;\n  --tw-translate-y: -50%;\n  --tw-scale-x: 0;\n  --tw-scale-y: 0;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  border-radius: 1.5rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding: 1rem;\n  transition-property: all;\n  transition-duration: 300ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}#create-todo-dialog.show-dialog {\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}#create-todo-dialog .create-todo {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  border-radius: 1rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding: 1rem;\n}#create-todo-dialog .create-todo fieldset {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n  border-width: 2px;\n  border-style: solid;\n  --tw-border-opacity: 1;\n  border-color: rgb(193 199 205 / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n  --tw-text-opacity: 1;\n  color: rgb(228 226 227 / var(--tw-text-opacity));\n}#create-todo-dialog .create-todo fieldset:first-child {\n  margin-top: 0px;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n}#create-todo-dialog .create-todo fieldset:last-child {\n  margin-bottom: 0px;\n  border-bottom-right-radius: 0.75rem;\n  border-bottom-left-radius: 0.75rem;\n}#create-todo-dialog .create-todo fieldset legend {\n  margin-left: 1rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n  --tw-text-opacity: 1;\n  color: rgb(184 201 215 / var(--tw-text-opacity));\n}#create-todo-dialog .create-todo fieldset input {\n  height: 100%;\n  width: 100%;\n  transform: none;\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding-left: 0.5rem;\n  padding-bottom: 0.5rem;\n  --tw-text-opacity: 1;\n  color: rgb(184 201 215 / var(--tw-text-opacity));\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}#create-todo-dialog .create-todo fieldset #priority {\n  margin-left: 0.5rem;\n  margin-right: 0.5rem;\n  height: 100%;\n  width: 100%;\n  transform: none;\n  --tw-bg-opacity: 1;\n  background-color: rgb(52 53 54 / var(--tw-bg-opacity));\n  padding-bottom: 0.5rem;\n  --tw-text-opacity: 1;\n  color: rgb(184 201 215 / var(--tw-text-opacity));\n  outline: 2px solid transparent;\n  outline-offset: 2px;width:calc(100% - 20px);\n}#create-todo-dialog .create-todo #todo-submit-button {\n  margin-top: 1rem;\n  width: 100%;\n  cursor: pointer;\n  border-radius: 0.75rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(65 71 76 / var(--tw-bg-opacity));\n  padding: 0.5rem;\n  --tw-text-opacity: 1;\n  color: rgb(186 203 217 / var(--tw-text-opacity));\n}#create-todo-dialog .create-todo #todo-submit-button:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(184 201 215 / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: rgb(34 50 61 / var(--tw-text-opacity));\n}#overlay {\n  visibility: hidden;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  z-index: 40;\n  height: 100%;\n  width: 100%;\n  --tw-translate-x: -50%;\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  border-radius: 1.5rem;\n  background-color: rgb(65 71 76 / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.5;\n  opacity: 0;\n  --tw-backdrop-blur: blur(16px);\n  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n  transition-property: all;\n  transition-duration: 500ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}#overlay.show-overlay {\n  visibility: visible;\n  opacity: 1;\n}.first\\:mt-0:first-child {\n  margin-top: 0px;\n}.first\\:rounded-t-xl:first-child {\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n}.first\\:rounded-tl-2xl:first-child {\n  border-top-left-radius: 1rem;\n}.first\\:rounded-tr-2xl:first-child {\n  border-top-right-radius: 1rem;\n}.last\\:mb-0:last-child {\n  margin-bottom: 0px;\n}.last\\:rounded-bl-2xl:last-child {\n  border-bottom-left-radius: 1rem;\n}.hover\\:scale-105:hover {\n  --tw-scale-x: 1.05;\n  --tw-scale-y: 1.05;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}.hover\\:bg-primary:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(184 201 215 / var(--tw-bg-opacity));\n}.hover\\:bg-secondary-container:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(65 71 76 / var(--tw-bg-opacity));\n}.hover\\:text-on-primary:hover {\n  --tw-text-opacity: 1;\n  color: rgb(34 50 61 / var(--tw-text-opacity));\n}.active\\:scale-95:active {\n  --tw-scale-x: .95;\n  --tw-scale-y: .95;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}","",{version:3,sources:["webpack://./node_modules/tailwindcss/base.css","webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:["@tailwind base;\n",'@import "tailwindcss/base";\n@import "tailwindcss/components";\n@import "tailwindcss/utilities";\n\n* {\n  @apply box-border;\n}\n\nbody {\n  @apply p-4 flex flex-col gap-4 h-dvh bg-secondary-container text-on-background;\n}\n\nnav {\n  @apply bg-secondary-container;\n}\n\n#main {\n  @apply flex p-2 gap-2 rounded-3xl overflow-scroll bg-surface h-full relative;\n}\n\n#sidebar {\n  @apply flex flex-col flex-nowrap gap-2 p-2 rounded-l-2xl basis-80 bg-surface-container-highest overflow-hidden flex-shrink-0;\n\n  .sidebar-button {\n    @apply p-3 w-full bg-surface-container hover:bg-secondary-container active:scale-95 hover:scale-105 transition-transform duration-150 ease-in-out text-secondary first:rounded-tl-2xl last:rounded-bl-2xl\n    text-left cursor-pointer;\n  }\n\n  #sort-by-container,\n  #show-select-container,\n  #projects-container {\n    @apply p-3 w-full bg-surface-container text-secondary first:rounded-tl-2xl last:rounded-bl-2xl flex gap-2 justify-between items-center;\n\n    #sortBy,\n    #show,\n    #projects {\n      @apply py-1 px-2 bg-surface-container-highest transform-none outline-none text-primary rounded-lg flex-grow;\n    }\n  }\n\n\n  #tags-container {\n    @apply p-3 w-full bg-surface-container text-secondary first:rounded-tl-2xl\n    last:rounded-bl-2xl flex flex-wrap gap-2 overflow-auto items-start\n    content-start justify-start flex-grow;\n\n    .tag {\n      @apply py-1 px-2 text-xs rounded-xl bg-primary-container text-on-primary-container;\n\n      &.selected {\n        @apply bg-primary text-on-primary;\n      }\n    }\n  }\n}\n\n#content {\n  @apply flex flex-col flex-nowrap overflow-auto flex-grow rounded-r-2xl justify-start;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n\n  .todo,\n  .todo-body {\n    @apply first:rounded-tr-2xl last:rounded-br-2xl;\n  }\n}\n\n.todo {\n  @apply p-4 flex flex-col transition-all duration-500 ease-in-out bg-surface-container-highest mt-1 mb-1 first:mt-0 last:mb-0;\n\n  &.hide {\n\n    .todo-header,\n    .todo-body {\n      @apply p-0 h-0 m-0 overflow-hidden;\n    }\n\n    @apply scale-y-0 translate-x-full origin-top;\n    @apply h-0 p-0 m-0;\n  }\n\n  &.hideBody {\n    @apply p-0;\n\n    .todo-header {\n      @apply rounded-none;\n    }\n\n    &:first-child .todo-header {\n      @apply rounded-tr-2xl;\n    }\n\n    &:last-child .todo-header {\n      @apply rounded-br-2xl;\n    }\n\n    .todo-body {\n      @apply py-0 max-h-0 overflow-hidden;\n    }\n  }\n\n  .todo-header {\n    @apply flex p-4 justify-between items-center rounded-t-2xl transition-all duration-500 ease-in-out bg-surface-container relative overflow-hidden;\n\n    .todo-checkbox {\n      @apply flex items-center relative;\n\n      input[type="checkbox"] {\n        @apply hidden select-none;\n\n        &:checked {\n          +.checkbox {\n            @apply border bg-primary border-primary;\n            padding: 0 50%;\n          }\n\n          ~.todo-title {\n            @apply pl-0;\n          }\n        }\n      }\n\n      .todo-title {\n        @apply cursor-pointer pl-8 transition-all duration-1000 ease-in-out hover:text-primary;\n\n      }\n\n      .checkbox {\n        @apply p-2.5 rounded-full border-2 border-solid cursor-pointer absolute transition-all duration-500 ease-in-out border-on-surface hover:border-primary;\n      }\n    }\n\n    &.priority-low {\n      @apply bg-gradient-to-r from-surface-container to-secondary-container to-90%;\n\n      .todo-project,\n      .todo-delete-action,\n      .todo-edit-action,\n      .todo-due {\n        @apply text-on-secondary-container;\n\n        &.expired {\n          @apply text-error;\n        }\n      }\n    }\n\n    &.priority-medium {\n      @apply bg-gradient-to-r from-surface-container to-secondary to-90%;\n\n      .todo-project,\n      .todo-delete-action,\n      .todo-edit-action,\n      .todo-due {\n        @apply text-on-secondary;\n      }\n    }\n\n    &.priority-high {\n      @apply bg-gradient-to-r from-surface-container to-primary to-90%;\n\n      .todo-project,\n      .todo-delete-action,\n      .todo-edit-action,\n      .todo-due {\n        @apply text-on-primary;\n      }\n    }\n\n    .todo-meta {\n      @apply flex flex-col items-end transition-all duration-500 ease-in-out;\n\n      .todo-due {\n        @apply text-xs;\n      }\n\n      .todo-project {\n        @apply text-sm;\n      }\n    }\n\n    .todo-delete-action,\n    .todo-edit-action {\n      @apply absolute -right-full cursor-pointer transition-all duration-700 ease-in-out text-on-primary;\n\n      svg {\n        @apply h-8;\n      }\n    }\n\n    .todo-edit-action {\n      @apply duration-500 ease-in-out;\n    }\n\n    &:hover {\n      .todo-delete-action {\n        @apply right-2 hover:text-error;\n      }\n\n      .todo-edit-action {\n        @apply right-10;\n      }\n\n      .todo-meta {\n        @apply mr-14;\n      }\n    }\n\n  }\n\n  .todo-body {\n    @apply p-4 rounded-b-2xl h-full max-h-36 max-w-full transition-all duration-500 ease-in-out bg-surface-container overflow-auto break-words;\n\n    #todo-creation-para {\n      @apply text-xs text-on-surface;\n    }\n\n    .todo-tags {\n      @apply mt-2 text-sm text-primary;\n\n      .tag {\n        @apply py-1 px-2 text-xs rounded-xl bg-primary-container text-on-primary-container;\n      }\n    }\n  }\n}\n\n.no-todos {\n  @apply p-4 text-center text-on-secondary-container bg-surface-container-highest first:rounded-tr-2xl;\n}\n\n#create-todo-dialog {\n  @apply absolute w-4/5 h-max scale-0 p-4 bg-surface-container-highest rounded-3xl top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 transition-all duration-300 ease-in-out z-50;\n\n  &.show-dialog {\n    @apply scale-100;\n  }\n\n  .create-todo {\n    @apply p-4 flex flex-col gap-2 bg-surface-container-highest rounded-2xl;\n\n    fieldset {\n      @apply text-on-surface bg-surface-container-highest border-2 border-solid border-secondary mt-1 mb-1 first:mt-0 last:mb-0 px-1 first:rounded-t-xl last:rounded-b-xl;\n\n      legend {\n        @apply text-primary ml-4 text-xs;\n      }\n\n      input {\n        @apply w-full h-full pl-2 pb-2 bg-surface-container-highest transform-none outline-none text-primary;\n      }\n\n      #priority {\n        @apply w-full h-full pb-2 bg-surface-container-highest transform-none outline-none text-primary mx-2;\n        width: calc(100% - 20px);\n      }\n    }\n\n    #todo-submit-button {\n      @apply p-2 mt-4 w-full bg-secondary-container text-on-primary-container cursor-pointer hover:bg-primary hover:text-on-primary rounded-xl;\n    }\n  }\n}\n\n#overlay {\n  @apply absolute w-full h-full opacity-0 invisible backdrop-blur-lg rounded-3xl top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 transition-all duration-500 ease-in-out bg-secondary-container bg-opacity-50 z-40;\n\n  &.show-overlay {\n    @apply visible opacity-100;\n  }\n}\n'],sourceRoot:""}]);const i=a},314:A=>{A.exports=function(A){var t=[];return t.toString=function(){return this.map((function(t){var n="",e=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),e&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=A(t),e&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(A,n,e,o,r){"string"==typeof A&&(A=[[null,A,void 0]]);var a={};if(e)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(var d=0;d<A.length;d++){var c=[].concat(A[d]);e&&a[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},354:A=>{A.exports=function(A){var t=A[1],n=A[3];if(!n)return t;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),r="/*# ".concat(o," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},735:(A,t,n)=>{var e=n(72),o=n.n(e),r=n(825),a=n.n(r),i=n(659),s=n.n(i),d=n(56),c=n.n(d),l=n(540),u=n.n(l),p=n(113),g=n.n(p),h=n(972),m={};m.styleTagTransform=g(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=u(),o()(h.A,m),h.A&&h.A.locals&&h.A.locals},72:A=>{var t=[];function n(A){for(var n=-1,e=0;e<t.length;e++)if(t[e].identifier===A){n=e;break}return n}function e(A,e){for(var r={},a=[],i=0;i<A.length;i++){var s=A[i],d=e.base?s[0]+e.base:s[0],c=r[d]||0,l="".concat(d," ").concat(c);r[d]=c+1;var u=n(l),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var g=o(p,e);e.byIndex=i,t.splice(i,0,{identifier:l,updater:g,references:1})}a.push(l)}return a}function o(A,t){var n=t.domAPI(t);return n.update(A),function(t){if(t){if(t.css===A.css&&t.media===A.media&&t.sourceMap===A.sourceMap&&t.supports===A.supports&&t.layer===A.layer)return;n.update(A=t)}else n.remove()}}A.exports=function(A,o){var r=e(A=A||[],o=o||{});return function(A){A=A||[];for(var a=0;a<r.length;a++){var i=n(r[a]);t[i].references--}for(var s=e(A,o),d=0;d<r.length;d++){var c=n(r[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=s}}},659:A=>{var t={};A.exports=function(A,n){var e=function(A){if(void 0===t[A]){var n=document.querySelector(A);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(A){n=null}t[A]=n}return t[A]}(A);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}},540:A=>{A.exports=function(A){var t=document.createElement("style");return A.setAttributes(t,A.attributes),A.insert(t,A.options),t}},56:(A,t,n)=>{A.exports=function(A){var t=n.nc;t&&A.setAttribute("nonce",t)}},825:A=>{A.exports=function(A){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=A.insertStyleElement(A);return{update:function(n){!function(A,t,n){var e="";n.supports&&(e+="@supports (".concat(n.supports,") {")),n.media&&(e+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(e+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),e+=n.css,o&&(e+="}"),n.media&&(e+="}"),n.supports&&(e+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(e,A,t.options)}(t,A,n)},remove:function(){!function(A){if(null===A.parentNode)return!1;A.parentNode.removeChild(A)}(t)}}}},113:A=>{A.exports=function(A,t){if(t.styleSheet)t.styleSheet.cssText=A;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(A))}}},11:(A,t,n)=>{var e;n.d(t,{A:()=>c});var o=new Uint8Array(16);function r(){if(!e&&!(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(o)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var i=[],s=0;s<256;++s)i.push((s+256).toString(16).substr(1));const d=function(A){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(i[A[t+0]]+i[A[t+1]]+i[A[t+2]]+i[A[t+3]]+"-"+i[A[t+4]]+i[A[t+5]]+"-"+i[A[t+6]]+i[A[t+7]]+"-"+i[A[t+8]]+i[A[t+9]]+"-"+i[A[t+10]]+i[A[t+11]]+i[A[t+12]]+i[A[t+13]]+i[A[t+14]]+i[A[t+15]]).toLowerCase();if(!function(A){return"string"==typeof A&&a.test(A)}(n))throw TypeError("Stringified UUID is invalid");return n},c=function(A,t,n){var e=(A=A||{}).random||(A.rng||r)();if(e[6]=15&e[6]|64,e[8]=63&e[8]|128,t){n=n||0;for(var o=0;o<16;++o)t[n+o]=e[o];return t}return d(e)}},44:(A,t,n)=>{n.a(A,(async(A,t)=>{try{n(735);var e=n(674),o=n(954),r=A([e,o]);[e,o]=r.then?(await r)():r,(0,o.Yg)(e.i.showHandler()),(0,o.RZ)(),t()}catch(A){t(A)}}))},954:(A,t,n)=>{n.a(A,(async(A,e)=>{try{n.d(t,{RZ:()=>c,Yg:()=>l});var o=n(231),r=n(117),a=n(660),i=n(11),s=n(674),d=A([s]);s=(d.then?(await d)():d)[0];const c=()=>{const A=(A,t)=>A.map((A=>`<option value="${A}" ${t===A?"selected":""}>${A}</option>`)).join("");document.getElementById("sidebar").innerHTML=`\n    <div id="sort-by-container">\n      <label for="sortBy">Sort By:</label>\n      <select name="sortBy" id="sortBy" required>\n        ${A(s.i.sortValues,s.i.sortBy)}\n      </select>\n    </div>\n    <div id="show-select-container">\n      <label for="show">Filter By:</label>\n      <select name="show" id="show" required>\n        ${A(s.i.showValues,s.i.shown)}\n      </select>\n    </div>\n    <div id="projects-container">\n        <label for="projects">Projects:</label> \n        <select name="projects" id="projects" required>\n          <option value="All">All</option>\n          ${A(s.i.projects,"")}\n        </select>\n    </div>\n    <div id="tags-container">\n        ${s.i.tags.map((A=>`<button class="tag">${A}</button>`)).join(" ")}\n    </div>\n    <button class="sidebar-button" id="removeComp">Remove Completed</button>\n    <button class="sidebar-button" id="removeAll">Remove All</button>\n    <button class="sidebar-button" id="dummyData">Load Dummy Data</button>\n    <button class="sidebar-button" id="new">New Todo</button>\n  `},l=A=>{const t=document.getElementById("content");function n(A){const t=A.target.getAttribute("data-id");document.getElementById(t).classList.toggle("hideBody",A.target.checked),s.i.updateCompletionStatus(t,A.target.checked)}function e(A){const t=A.target.closest(".todo");t.classList.add("hide"),setTimeout((()=>{t.remove()}),400),s.i.removeTodoById(t.id),s.i.saveTodos(),c()}function a(A){const t=A.target.closest(".todo"),n=s.i.getTodoById(t.id);let e=document.getElementById("create-todo-dialog"),r=document.getElementById("overlay");e.classList.toggle("show-dialog"),r.classList.toggle("show-overlay"),e.id="create-todo-dialog",e.innerHTML=`\n    ${u()}\n    `;let a=document.getElementById("title");a.value=n.title;let d=document.getElementById("description");d.value=n.description;let c=document.getElementById("project");c.value=n.project;let p=document.getElementById("dueDate");p.value=(0,o.GP)(n.dueDate,"yyyy-MM-dd'T'HH:mm");let g=document.getElementById("priority");g.value=n.priority;let h=document.getElementById("tags-input");h.value=n.tags.join(" ");let m=document.getElementById("todo-submit-button");m.textContent="Edit Todo",m.addEventListener("click",(function(A){A.preventDefault();let o={id:(0,i.A)(),title:a.value,description:d.value,createdOn:n.createdOn,dueDate:p.value,priority:g.value,completed:!1,tags:h.value.split(" "),project:c.value};s.i.updateTodoById(t.id,o),e.classList.toggle("show-dialog"),r.classList.toggle("show-overlay"),l(s.i.showHandler())}))}t.innerHTML="",A.length>0?(A.forEach(((A,n)=>{let e=document.createElement("div"),o=(0,r.B)(A.dueDate,{addSuffix:!0});e.id=A.id,e.classList.add("todo",`${A.priority}`,A.completed?"hideBody":"shown"),e.innerHTML=`\n        <div class="todo-header priority-${A.priority}">\n            <div class="todo-checkbox">\n              <input type="checkbox" id="checkbox-${n}" data-id="${A.id}" ${A.completed?"checked":""} value="${A.completed}">\n              <label for="checkbox-${n}" class="checkbox"></label>\n              <label for="checkbox-${n}" class="todo-title">${A.title}</label>\n            </div>\n            <div class="todo-meta">\n              <span class="todo-project">${A.project}</span>\n              <span class="todo-due ${o.includes("ago")&&!A.completed?"expired":""}">Due ${o}</span>\n            </div>\n            <button class="todo-delete-action">\n              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">\n                <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />\n              </svg>\n            </button>\n            <button class="todo-edit-action">\n             <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">\n  <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />\n            </svg>\n            </button>\n\n        </div>\n        <div class="todo-body">\n            <p>${A.description}</p>\n            <p id="todo-creation-para">Created ${(0,r.B)(A.createdOn,{addSuffix:!0})}</p>\n            <div class="todo-tags">\n            ${A.tags.length>1?"Tags:":""} <span>${A.tags.map((A=>A&&`<span class="tag">${A}</span>`)).join(" ")}</span>\n            </div>\n        </div>\n      `,t.appendChild(e)})),t.querySelectorAll(".todo-checkbox input[type='checkbox']").forEach((A=>{A.addEventListener("click",n)})),t.querySelectorAll(".todo-delete-action").forEach((A=>{A.addEventListener("click",e)})),t.querySelectorAll(".todo-edit-action").forEach((A=>{A.addEventListener("click",a)}))):t.innerHTML='\n      <div class="no-todos">No todos found. You must be really productive!</div>\n    '};function u(){return`\n    <div class="create-todo">\n       <form id="create-todo-form">\n           <div>\n           <fieldset><legend>Title</legend>\n           <input type="text" name="title" id="title" placeholder="Title" maxlength="50" required>\n           </fieldset>\n           <fieldset><legend>Description</legend>\n           <input type="text" name="description" id="description" placeholder="Description" maxlength="200" required>\n           </fieldset>\n           <fieldset><legend>project</legend>\n           <input type="text" name="project" id="project" placeholder="project" maxlength="20" required>\n           </fieldset>\n           <fieldset><legend>Due Time</legend>\n           <input type="datetime-local" id="dueDate" name="dueDate"\n           value=${(0,o.GP)((0,a.z)(new Date,5),"yyyy-MM-dd'T'HH:mm")} \n           min=${(0,o.GP)(new Date,"yyyy-MM-dd'T'HH:mm")} required>\n           </fieldset>\n           <fieldset><legend>Tags</legend>\n           <input type="text" name="tags" id="tags-input" placeholder="Tags" maxlength="20">\n           </fieldset>\n           <fieldset><legend>Priority</legend>\n           <select name="priority" id="priority" required>\n           <option value="low">Low</option>\n           <option value="medium">Medium</option>\n           <option value="high">High</option>\n           </select>\n           </fieldset>\n           </div>\n           <button type="submit" id="todo-submit-button">Create Todo</button>\n       </form> \n   </div>`}function p(){let A=document.getElementById("create-todo-dialog"),t=document.getElementById("overlay");A.classList.toggle("show-dialog"),t.classList.toggle("show-overlay"),A.id="create-todo-dialog",A.innerHTML=`\n    ${u()}\n    `,document.getElementById("create-todo-form").addEventListener("submit",(function(n){n.preventDefault(),function(){let A=document.getElementById("title").value,t=document.getElementById("description").value,n=document.getElementById("project").value,e=document.getElementById("dueDate").value,o=document.getElementById("priority").value,r=document.getElementById("tags-input").value.split(" "),a={id:(0,i.A)(),title:A,description:t,createdOn:new Date,dueDate:e,priority:o,completed:!1,tags:r,project:n};s.i.addTodo(a)}(),A.classList.toggle("show-dialog"),t.classList.toggle("show-overlay"),l(s.i.showHandler()),c()}))}const g=A=>{const{id:t,classList:n}=A.target;switch(t){case"new":p();break;case"removeComp":s.i.removeAllCompletedTodos();break;case"removeAll":s.i.removeAllTodos();break;case"dummyData":s.i.loadDummyData();break;default:if(n.contains("tag")){A.target.classList.toggle("selected");const t=Array.from(document.querySelectorAll(".tag.selected")).map((A=>A.textContent));l(s.i.tagsHandler(t))}}["removeComp","removeAll","dummyData"].includes(t)&&(l(s.i.showHandler()),console.log("rendering todos"),c())},h=A=>{const{id:t,value:n}=A.target;switch(t){case"sortBy":l(s.i.sortHandler(n));break;case"show":l(s.i.showHandler(n));break;case"projects":l(s.i.projectHandler(n))}},m=document.getElementById("sidebar");m.addEventListener("click",g),m.addEventListener("change",h),document.addEventListener("keydown",(A=>{if("Escape"===A.key){let A=document.getElementById("create-todo-dialog"),t=document.getElementById("overlay");A.classList.remove("show-dialog"),t.classList.remove("show-overlay")}})),e()}catch(w){e(w)}}))},674:(A,t,n)=>{n.a(A,(async(A,e)=>{try{n.d(t,{i:()=>g});var o=n(197),r=n(733),a=n(988),i=n(482),s=n(331),d=n(999),c=n(764);const A=await n.e(816).then(n.t.bind(n,816,19)),l={TITLE:"Title",PRIORITY:"Priority",COMPLETION:"Completion",CREATION_DATE:"Creation date",DUE_DATE:"Due date"},u={TODAY:"Today",THIS_WEEK:"This Week",THIS_MONTH:"This Month",COMPLETED:"Completed",PENDING:"Pending",ALL:"All"};class p{constructor(){this.todos=[],this.projects=[],this.tags=[],this.activeTags=[],this.sortBy=l.TITLE,this.shown=u.ALL,this.projectFilter="All",this.sortValues=Object.values(l),this.showValues=Object.values(u),this.loadTodos()}updateProjectsAndTags(A){this.projects.includes(A.project)||this.projects.push(A.project),A.tags&&A.tags.forEach((A=>{this.tags.includes(A)||this.tags.push(A)}))}sortHandler(A=this.sortBy){this.sortBy=A;const t={low:1,medium:2,high:3},n={[l.TITLE]:(A,t)=>A.title.localeCompare(t.title),[l.PRIORITY]:(A,n)=>t[n.priority]-t[A.priority],[l.COMPLETION]:(A,t)=>A.completed-t.completed,[l.CREATION_DATE]:(A,t)=>(0,o.T)(A.createdOn,t.createdOn),[l.DUE_DATE]:(A,t)=>(0,r.z)(A.dueDate,t.dueDate)};return this.todos.sort(n[A]||(()=>0)),this.showHandler()}showHandler(A=this.shown){this.shown=A;const t={[u.TODAY]:A=>(0,a.c)(A.dueDate),[u.THIS_WEEK]:A=>(0,i.x)(A.dueDate),[u.THIS_MONTH]:A=>(0,s.d)(A.dueDate),[u.COMPLETED]:A=>!0===A.completed,[u.PENDING]:A=>!1===A.completed,[u.ALL]:()=>!0};let n=this.todos.filter(t[A]||t[u.ALL]);return"All"!==this.projectFilter&&(n=n.filter((A=>A.project===this.projectFilter))),this.activeTags.length>0&&(n=n.filter((A=>this.activeTags.every((t=>A.tags.includes(t)))))),n}projectHandler(A=this.projectFilter){return this.projectFilter=A,this.showHandler()}tagsHandler(A=this.activeTags){return this.activeTags=A,this.showHandler()}addTodo(A){this.todos.push(A),this.updateProjectsAndTags(A),this.sortHandler(),this.saveTodos()}removeTodoById(A){this.todos=this.todos.filter((t=>t.id!==A)),this.projects=[],this.tags=[],this.todos.forEach((A=>this.updateProjectsAndTags(A))),this.sortHandler(),this.saveTodos()}updateTodoById(A,t){const n=this.todos.findIndex((t=>t.id===A));-1!==n&&(this.todos[n]=t,this.sortHandler(),this.saveTodos())}updateCompletionStatus(A,t){const n=this.getTodoById(A);n&&(n.completed=t,this.saveTodos())}getTodoById(A){return this.todos.find((t=>t.id===A))}async saveTodos(){await localStorage.setItem("todos",JSON.stringify(this.todos))}async loadTodos(t=!1){let n=t?A.default:JSON.parse(await localStorage.getItem("todos"));this.todos=n||[],this.todos.forEach((A=>{this.updateProjectsAndTags(A),t&&(A.dueDate=(0,d.f)(new Date,(0,c.c)(A.dueDate,A.createdOn)))})),this.saveTodos()}async loadDummyData(){await this.loadTodos(!0)}removeAllCompletedTodos(){this.todos=this.todos.filter((A=>!A.completed)),this.projects=[],this.tags=[],this.todos.forEach((A=>this.updateProjectsAndTags(A))),this.saveTodos()}removeAllTodos(){this.todos=[],this.projects=[],this.tags=[],this.todos.forEach((A=>this.updateProjectsAndTags(A))),this.saveTodos()}}let g=new p;e()}catch(A){e(A)}}),1)},695:(A,t,n)=>{n.d(t,{q:()=>o});let e={};function o(){return e}},215:(A,t,n)=>{n.d(t,{G:()=>o});var e=n(642);function o(A){const t=(0,e.a)(A),n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),+A-+n}},999:(A,t,n)=>{n.d(t,{f:()=>r});var e=n(642),o=n(840);function r(A,t){const n=(0,e.a)(A);return isNaN(t)?(0,o.w)(A,NaN):t?(n.setDate(n.getDate()+t),n):n}},660:(A,t,n)=>{n.d(t,{z:()=>a});var e=n(642),o=n(840);var r=n(940);function a(A,t){return function(A,t){const n=+(0,e.a)(A);return(0,o.w)(A,n+t)}(A,t*r.Cg)}},733:(A,t,n)=>{n.d(t,{z:()=>o});var e=n(642);function o(A,t){const n=(0,e.a)(A),o=(0,e.a)(t),r=n.getTime()-o.getTime();return r<0?-1:r>0?1:r}},197:(A,t,n)=>{n.d(t,{T:()=>o});var e=n(642);function o(A,t){const n=(0,e.a)(A),o=(0,e.a)(t),r=n.getTime()-o.getTime();return r>0?-1:r<0?1:r}},940:(A,t,n)=>{n.d(t,{Cg:()=>r,F6:()=>s,Ks:()=>a,Nw:()=>i,my:()=>e,w4:()=>o}),Math.pow(10,8);const e=6048e5,o=864e5,r=6e4,a=525600,i=43200,s=1440},840:(A,t,n)=>{function e(A,t){return A instanceof Date?new A.constructor(t):new Date(t)}n.d(t,{w:()=>e})},284:(A,t,n)=>{n.d(t,{A:()=>o});var e=n(840);function o(A){return(0,e.w)(A,Date.now())}},514:(A,t,n)=>{n.d(t,{m:()=>a});var e=n(940),o=n(730),r=n(215);function a(A,t){const n=(0,o.o)(A),a=(0,o.o)(t),i=+n-(0,r.G)(n),s=+a-(0,r.G)(a);return Math.round((i-s)/e.w4)}},764:(A,t,n)=>{n.d(t,{c:()=>r});var e=n(514),o=n(642);function r(A,t){const n=(0,o.a)(A),r=(0,o.a)(t),i=a(n,r),s=Math.abs((0,e.m)(n,r));n.setDate(n.getDate()-i*s);const d=i*(s-Number(a(n,r)===-i));return 0===d?0:d}function a(A,t){const n=A.getFullYear()-t.getFullYear()||A.getMonth()-t.getMonth()||A.getDate()-t.getDate()||A.getHours()-t.getHours()||A.getMinutes()-t.getMinutes()||A.getSeconds()-t.getSeconds()||A.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}},231:(A,t,n)=>{n.d(t,{GP:()=>Y});var e=n(519),o=n(695),r=n(514),a=n(642),i=n(840);function s(A){const t=(0,a.a)(A);return(0,r.m)(t,function(A){const t=(0,a.a)(A),n=(0,i.w)(A,0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}(t))+1}var d=n(940),c=n(528);function l(A){return(0,c.k)(A,{weekStartsOn:1})}function u(A){const t=(0,a.a)(A),n=t.getFullYear(),e=(0,i.w)(A,0);e.setFullYear(n+1,0,4),e.setHours(0,0,0,0);const o=l(e),r=(0,i.w)(A,0);r.setFullYear(n,0,4),r.setHours(0,0,0,0);const s=l(r);return t.getTime()>=o.getTime()?n+1:t.getTime()>=s.getTime()?n:n-1}function p(A){const t=(0,a.a)(A),n=+l(t)-+function(A){const t=u(A),n=(0,i.w)(A,0);return n.setFullYear(t,0,4),n.setHours(0,0,0,0),l(n)}(t);return Math.round(n/d.my)+1}function g(A,t){const n=(0,a.a)(A),e=n.getFullYear(),r=(0,o.q)(),s=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,d=(0,i.w)(A,0);d.setFullYear(e+1,0,s),d.setHours(0,0,0,0);const l=(0,c.k)(d,t),u=(0,i.w)(A,0);u.setFullYear(e,0,s),u.setHours(0,0,0,0);const p=(0,c.k)(u,t);return n.getTime()>=l.getTime()?e+1:n.getTime()>=p.getTime()?e:e-1}function h(A,t){const n=(0,a.a)(A),e=+(0,c.k)(n,t)-+function(A,t){const n=(0,o.q)(),e=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,r=g(A,t),a=(0,i.w)(A,0);return a.setFullYear(r,0,e),a.setHours(0,0,0,0),(0,c.k)(a,t)}(n,t);return Math.round(e/d.my)+1}function m(A,t){return(A<0?"-":"")+Math.abs(A).toString().padStart(t,"0")}const w={y(A,t){const n=A.getFullYear(),e=n>0?n:1-n;return m("yy"===t?e%100:e,t.length)},M(A,t){const n=A.getMonth();return"M"===t?String(n+1):m(n+1,2)},d:(A,t)=>m(A.getDate(),t.length),a(A,t){const n=A.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(A,t)=>m(A.getHours()%12||12,t.length),H:(A,t)=>m(A.getHours(),t.length),m:(A,t)=>m(A.getMinutes(),t.length),s:(A,t)=>m(A.getSeconds(),t.length),S(A,t){const n=t.length,e=A.getMilliseconds();return m(Math.trunc(e*Math.pow(10,n-3)),t.length)}},b={G:function(A,t,n){const e=A.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"});case"GGGGG":return n.era(e,{width:"narrow"});default:return n.era(e,{width:"wide"})}},y:function(A,t,n){if("yo"===t){const t=A.getFullYear(),e=t>0?t:1-t;return n.ordinalNumber(e,{unit:"year"})}return w.y(A,t)},Y:function(A,t,n,e){const o=g(A,e),r=o>0?o:1-o;return"YY"===t?m(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):m(r,t.length)},R:function(A,t){return m(u(A),t.length)},u:function(A,t){return m(A.getFullYear(),t.length)},Q:function(A,t,n){const e=Math.ceil((A.getMonth()+1)/3);switch(t){case"Q":return String(e);case"QQ":return m(e,2);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});default:return n.quarter(e,{width:"wide",context:"formatting"})}},q:function(A,t,n){const e=Math.ceil((A.getMonth()+1)/3);switch(t){case"q":return String(e);case"qq":return m(e,2);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});default:return n.quarter(e,{width:"wide",context:"standalone"})}},M:function(A,t,n){const e=A.getMonth();switch(t){case"M":case"MM":return w.M(A,t);case"Mo":return n.ordinalNumber(e+1,{unit:"month"});case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});default:return n.month(e,{width:"wide",context:"formatting"})}},L:function(A,t,n){const e=A.getMonth();switch(t){case"L":return String(e+1);case"LL":return m(e+1,2);case"Lo":return n.ordinalNumber(e+1,{unit:"month"});case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});default:return n.month(e,{width:"wide",context:"standalone"})}},w:function(A,t,n,e){const o=h(A,e);return"wo"===t?n.ordinalNumber(o,{unit:"week"}):m(o,t.length)},I:function(A,t,n){const e=p(A);return"Io"===t?n.ordinalNumber(e,{unit:"week"}):m(e,t.length)},d:function(A,t,n){return"do"===t?n.ordinalNumber(A.getDate(),{unit:"date"}):w.d(A,t)},D:function(A,t,n){const e=s(A);return"Do"===t?n.ordinalNumber(e,{unit:"dayOfYear"}):m(e,t.length)},E:function(A,t,n){const e=A.getDay();switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})}},e:function(A,t,n,e){const o=A.getDay(),r=(o-e.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return m(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(A,t,n,e){const o=A.getDay(),r=(o-e.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return m(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(A,t,n){const e=A.getDay(),o=0===e?7:e;switch(t){case"i":return String(o);case"ii":return m(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(e,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(e,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(e,{width:"short",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})}},a:function(A,t,n){const e=A.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})}},b:function(A,t,n){const e=A.getHours();let o;switch(o=12===e?"noon":0===e?"midnight":e/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(A,t,n){const e=A.getHours();let o;switch(o=e>=17?"evening":e>=12?"afternoon":e>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(A,t,n){if("ho"===t){let t=A.getHours()%12;return 0===t&&(t=12),n.ordinalNumber(t,{unit:"hour"})}return w.h(A,t)},H:function(A,t,n){return"Ho"===t?n.ordinalNumber(A.getHours(),{unit:"hour"}):w.H(A,t)},K:function(A,t,n){const e=A.getHours()%12;return"Ko"===t?n.ordinalNumber(e,{unit:"hour"}):m(e,t.length)},k:function(A,t,n){let e=A.getHours();return 0===e&&(e=24),"ko"===t?n.ordinalNumber(e,{unit:"hour"}):m(e,t.length)},m:function(A,t,n){return"mo"===t?n.ordinalNumber(A.getMinutes(),{unit:"minute"}):w.m(A,t)},s:function(A,t,n){return"so"===t?n.ordinalNumber(A.getSeconds(),{unit:"second"}):w.s(A,t)},S:function(A,t){return w.S(A,t)},X:function(A,t,n){const e=A.getTimezoneOffset();if(0===e)return"Z";switch(t){case"X":return f(e);case"XXXX":case"XX":return y(e);default:return y(e,":")}},x:function(A,t,n){const e=A.getTimezoneOffset();switch(t){case"x":return f(e);case"xxxx":case"xx":return y(e);default:return y(e,":")}},O:function(A,t,n){const e=A.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+E(e,":");default:return"GMT"+y(e,":")}},z:function(A,t,n){const e=A.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+E(e,":");default:return"GMT"+y(e,":")}},t:function(A,t,n){return m(Math.trunc(A.getTime()/1e3),t.length)},T:function(A,t,n){return m(A.getTime(),t.length)}};function E(A,t=""){const n=A>0?"-":"+",e=Math.abs(A),o=Math.trunc(e/60),r=e%60;return 0===r?n+String(o):n+String(o)+t+m(r,2)}function f(A,t){return A%60==0?(A>0?"-":"+")+m(Math.abs(A)/60,2):y(A,t)}function y(A,t=""){const n=A>0?"-":"+",e=Math.abs(A);return n+m(Math.trunc(e/60),2)+t+m(e%60,2)}const v=(A,t)=>{switch(A){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},x=(A,t)=>{switch(A){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},B={p:x,P:(A,t)=>{const n=A.match(/(P+)(p+)?/)||[],e=n[1],o=n[2];if(!o)return v(A,t);let r;switch(e){case"P":r=t.dateTime({width:"short"});break;case"PP":r=t.dateTime({width:"medium"});break;case"PPP":r=t.dateTime({width:"long"});break;default:r=t.dateTime({width:"full"})}return r.replace("{{date}}",v(e,t)).replace("{{time}}",x(o,t))}},k=/^D+$/,C=/^Y+$/,M=["D","DD","YY","YYYY"];function D(A){if(!(t=A,t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)||"number"==typeof A))return!1;var t;const n=(0,a.a)(A);return!isNaN(Number(n))}const T=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,S=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,j=/^'([^]*?)'?$/,I=/''/g,z=/[a-zA-Z]/;function Y(A,t,n){const r=(0,o.q)(),i=n?.locale??r.locale??e.c,s=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,d=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,c=(0,a.a)(A);if(!D(c))throw new RangeError("Invalid time value");let l=t.match(S).map((A=>{const t=A[0];return"p"===t||"P"===t?(0,B[t])(A,i.formatLong):A})).join("").match(T).map((A=>{if("''"===A)return{isToken:!1,value:"'"};const t=A[0];if("'"===t)return{isToken:!1,value:P(A)};if(b[t])return{isToken:!0,value:A};if(t.match(z))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:A}}));i.localize.preprocessor&&(l=i.localize.preprocessor(c,l));const u={firstWeekContainsDate:s,weekStartsOn:d,locale:i};return l.map((e=>{if(!e.isToken)return e.value;const o=e.value;return(!n?.useAdditionalWeekYearTokens&&function(A){return C.test(A)}(o)||!n?.useAdditionalDayOfYearTokens&&function(A){return k.test(A)}(o))&&function(A,t,n){const e=function(A,t,n){const e="Y"===A[0]?"years":"days of the month";return`Use \`${A.toLowerCase()}\` instead of \`${A}\` (in \`${t}\`) for formatting ${e} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(A,t,n);if(console.warn(e),M.includes(A))throw new RangeError(e)}(o,t,String(A)),(0,b[o[0]])(c,o,i.localize,u)})).join("")}function P(A){const t=A.match(j);return t?t[1].replace(I,"'"):A}},117:(A,t,n)=>{n.d(t,{B:()=>c});var e=n(519),o=n(695),r=n(215),a=n(733),i=n(940),s=n(642);var d=n(284);function c(A,t){return function(A,t,n){const d=(0,o.q)(),c=n?.locale??d.locale??e.c,l=(0,a.z)(A,t);if(isNaN(l))throw new RangeError("Invalid time value");const u=Object.assign({},n,{addSuffix:n?.addSuffix,comparison:l});let p,g;l>0?(p=(0,s.a)(t),g=(0,s.a)(A)):(p=(0,s.a)(A),g=(0,s.a)(t));const h=(m=n?.roundingMethod??"round",A=>{const t=(m?Math[m]:Math.trunc)(A);return 0===t?0:t});var m;const w=g.getTime()-p.getTime(),b=w/i.Cg,E=(w-((0,r.G)(g)-(0,r.G)(p)))/i.Cg,f=n?.unit;let y;if(y=f||(b<1?"second":b<60?"minute":b<i.F6?"hour":E<i.Nw?"day":E<i.Ks?"month":"year"),"second"===y){const A=h(w/1e3);return c.formatDistance("xSeconds",A,u)}if("minute"===y){const A=h(b);return c.formatDistance("xMinutes",A,u)}if("hour"===y){const A=h(b/60);return c.formatDistance("xHours",A,u)}if("day"===y){const A=h(E/i.F6);return c.formatDistance("xDays",A,u)}if("month"===y){const A=h(E/i.Nw);return 12===A&&"month"!==f?c.formatDistance("xYears",1,u):c.formatDistance("xMonths",A,u)}{const A=h(E/i.Ks);return c.formatDistance("xYears",A,u)}}(A,(0,d.A)(A),t)}},331:(A,t,n)=>{n.d(t,{d:()=>r});var e=n(284),o=n(642);function r(A){return function(A,t){const n=(0,o.a)(A),e=(0,o.a)(t);return n.getFullYear()===e.getFullYear()&&n.getMonth()===e.getMonth()}(A,(0,e.A)(A))}},482:(A,t,n)=>{n.d(t,{x:()=>r});var e=n(284),o=n(528);function r(A,t){return function(A,t,n){return+(0,o.k)(A,n)==+(0,o.k)(t,n)}(A,(0,e.A)(A),t)}},988:(A,t,n)=>{n.d(t,{c:()=>r});var e=n(284),o=n(730);function r(A){return t=A,n=(0,e.A)(A),+(0,o.o)(t)==+(0,o.o)(n);var t,n}},519:(A,t,n)=>{n.d(t,{c:()=>c});const e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function o(A){return(t={})=>{const n=t.width?String(t.width):A.defaultWidth;return A.formats[n]||A.formats[A.defaultWidth]}}const r={date:o({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:o({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:o({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},a={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function i(A){return(t,n)=>{let e;if("formatting"===(n?.context?String(n.context):"standalone")&&A.formattingValues){const t=A.defaultFormattingWidth||A.defaultWidth,o=n?.width?String(n.width):t;e=A.formattingValues[o]||A.formattingValues[t]}else{const t=A.defaultWidth,o=n?.width?String(n.width):A.defaultWidth;e=A.values[o]||A.values[t]}return e[A.argumentCallback?A.argumentCallback(t):t]}}function s(A){return(t,n={})=>{const e=n.width,o=e&&A.matchPatterns[e]||A.matchPatterns[A.defaultMatchWidth],r=t.match(o);if(!r)return null;const a=r[0],i=e&&A.parsePatterns[e]||A.parsePatterns[A.defaultParseWidth],s=Array.isArray(i)?function(A){for(let t=0;t<A.length;t++)if(A[t].test(a))return t}(i):function(A){for(const t in A)if(Object.prototype.hasOwnProperty.call(A,t)&&A[t].test(a))return t}(i);let d;return d=A.valueCallback?A.valueCallback(s):s,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:t.slice(a.length)}}}var d;const c={code:"en-US",formatDistance:(A,t,n)=>{let o;const r=e[A];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:r,formatRelative:(A,t,n,e)=>a[A],localize:{ordinalNumber:(A,t)=>{const n=Number(A),e=n%100;if(e>20||e<10)switch(e%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:i({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:i({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:A=>A-1}),month:i({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:i({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:i({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(d={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:A=>parseInt(A,10)},(A,t={})=>{const n=A.match(d.matchPattern);if(!n)return null;const e=n[0],o=A.match(d.parsePattern);if(!o)return null;let r=d.valueCallback?d.valueCallback(o[0]):o[0];return r=t.valueCallback?t.valueCallback(r):r,{value:r,rest:A.slice(e.length)}}),era:s({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:s({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:A=>A+1}),month:s({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:s({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:s({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}}},730:(A,t,n)=>{n.d(t,{o:()=>o});var e=n(642);function o(A){const t=(0,e.a)(A);return t.setHours(0,0,0,0),t}},528:(A,t,n)=>{n.d(t,{k:()=>r});var e=n(642),o=n(695);function r(A,t){const n=(0,o.q)(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,a=(0,e.a)(A),i=a.getDay(),s=(i<r?7:0)+i-r;return a.setDate(a.getDate()-s),a.setHours(0,0,0,0),a}},642:(A,t,n)=>{function e(A){const t=Object.prototype.toString.call(A);return A instanceof Date||"object"==typeof A&&"[object Date]"===t?new A.constructor(+A):"number"==typeof A||"[object Number]"===t||"string"==typeof A||"[object String]"===t?new Date(A):new Date(NaN)}n.d(t,{a:()=>e})}},A=>{A(A.s=44)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,